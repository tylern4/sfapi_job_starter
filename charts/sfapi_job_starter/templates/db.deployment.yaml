apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}-db'
  labels:
    component: db
    project: '{{ .Chart.Name }}'
    release: '{{ .Release.Name }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      component: db
      release: '{{ .Release.Name }}'
  template:
    metadata:
      labels:
        component: db
        release: '{{ .Release.Name }}'
    spec:
      containers:
        - name: db
          image: '{{ .Values.db.repository.image }}{{ if ne .Values.db.repository.tag "" }}:{{ .Values.db.repository.tag }}{{ end }}'
          ports:
            - name: db
              containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: '{{ tpl .Values.db.environment.POSTGRES_USER . }}'
            - name: POSTGRES_PASSWORD
              value: '{{ tpl .Values.db.environment.POSTGRES_PASSWORD . }}'
          command:
            - postgres
            - -c
            - log_statement=ddl
            - -c
            - log_destination=stderr
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: db
          livenessProbe:
            exec:
              command:
                - pg_isready -U postgres
            periodSeconds: 5
            initialDelaySeconds: 0
            successThreshold: 1
            failureThreshold: 5
      volumes:
        - name: db
          {{- if  .Values.db.persistence.db.enabled }}
          persistentVolumeClaim:
            claimName: '{{ .Release.Name }}-db'
          {{ else }}
          emptyDir: {}
          {{- end }}

